extern crate clap;
use clap::App;

// https://crypto.stackexchange.com/questions/12873/aes-mixcolumn-stage/12880#12880

/**
    Some reference implementations
    http://point-at-infinity.org/ssss/
*/
const MAX_DEGREE: i32 = 1024;
static GF256_EXP: [u8; 256] = [
    0x1, 0x3, 0x5, 0xF, 0x11, 0x33, 0x55, 0xFF, 0x1A, 0x2E, 0x72, 0x96,
    0xA1, 0xF8, 0x13, 0x35, 0x5F, 0xE1, 0x38, 0x48, 0xD8, 0x73, 0x95,
    0xA4, 0xF7, 0x2, 0x6, 0xA, 0x1E, 0x22, 0x66, 0xAA, 0xE5, 0x34, 0x5C,
    0xE4, 0x37, 0x59, 0xEB, 0x26, 0x6A, 0xBE, 0xD9, 0x70, 0x90, 0xAB,
    0xE6, 0x31, 0x53, 0xF5, 0x4, 0xC, 0x14, 0x3C, 0x44, 0xCC, 0x4F, 0xD1,
    0x68, 0xB8, 0xD3, 0x6E, 0xB2, 0xCD, 0x4C, 0xD4, 0x67, 0xA9, 0xE0,
    0x3B, 0x4D, 0xD7, 0x62, 0xA6, 0xF1, 0x8, 0x18, 0x28, 0x78, 0x88, 0x83,
    0x9E, 0xB9, 0xD0, 0x6B, 0xBD, 0xDC, 0x7F, 0x81, 0x98, 0xB3, 0xCE,
    0x49, 0xDB, 0x76, 0x9A, 0xB5, 0xC4, 0x57, 0xF9, 0x10, 0x30, 0x50,
    0xF0, 0xB, 0x1D, 0x27, 0x69, 0xBB, 0xD6, 0x61, 0xA3, 0xFE, 0x19, 0x2B,
    0x7D, 0x87, 0x92, 0xAD, 0xEC, 0x2F, 0x71, 0x93, 0xAE, 0xE9, 0x20,
    0x60, 0xA0, 0xFB, 0x16, 0x3A, 0x4E, 0xD2, 0x6D, 0xB7, 0xC2, 0x5D,
    0xE7, 0x32, 0x56, 0xFA, 0x15, 0x3F, 0x41, 0xC3, 0x5E, 0xE2, 0x3D,
    0x47, 0xC9, 0x40, 0xC0, 0x5B, 0xED, 0x2C, 0x74, 0x9C, 0xBF, 0xDA,
    0x75, 0x9F, 0xBA, 0xD5, 0x64, 0xAC, 0xEF, 0x2A, 0x7E, 0x82, 0x9D,
    0xBC, 0xDF, 0x7A, 0x8E, 0x89, 0x80, 0x9B, 0xB6, 0xC1, 0x58, 0xE8,
    0x23, 0x65, 0xAF, 0xEA, 0x25, 0x6F, 0xB1, 0xC8, 0x43, 0xC5, 0x54,
    0xFC, 0x1F, 0x21, 0x63, 0xA5, 0xF4, 0x7, 0x9, 0x1B, 0x2D, 0x77, 0x99,
    0xB0, 0xCB, 0x46, 0xCA, 0x45, 0xCF, 0x4A, 0xDE, 0x79, 0x8B, 0x86,
    0x91, 0xA8, 0xE3, 0x3E, 0x42, 0xC6, 0x51, 0xF3, 0xE, 0x12, 0x36, 0x5A,
    0xEE, 0x29, 0x7B, 0x8D, 0x8C, 0x8F, 0x8A, 0x85, 0x94, 0xA7, 0xF2, 0xD,
    0x17, 0x39, 0x4B, 0xDD, 0x7C, 0x84, 0x97, 0xA2, 0xFD, 0x1C, 0x24,
    0x6C, 0xB4, 0xC7, 0x52, 0xF6, 0x1,
];

fn mul(a1: u8, b1: u8) -> u8 {
    // https://crypto.stackexchange.com/questions/12873/aes-mixcolumn-stage/12880#12880
    let mut a: u8 = a1;
    let mut b: u8 = b1;
    let mut p: u8 = 0;
    let mut carry: u8;

    // println!("starting a: {:b}", a);
    // https://en.wikipedia.org/wiki/Multiplication_algorithm#Binary_or_Peasant_multiplication
    while b != 0 {
        if b & 1 == 1 {
            p ^= a;
        }
        carry = a & 0x80u8;
        a <<= 1;
        // println!("a: {:b}", a);
        if carry != 0 {
            a ^= 0x001b;
        }
        b >>= 1;
        // println!("carry: {:b} a: {:b} b: {:b} p: {:b}", carry, a, b, p);
    }
    // println!("result:{:b} 0x{:X} b:{:}", p, p, b);
    return p;
}

fn generate_exp() -> [u8; 256] {
    let mut log = [0_u8; 256];
    let mut x = 0x01;
    for power in 0..255usize {
        log[power] = x;
        let res = mul(x, 0x03u8);
        x = res;
    }
    log[255] = x;
    return log;
}

fn print_exp(log: &[u8; 256]) {
    let column = 16;
    let mut counter = 0;
    for item in log.iter() {
        print!("0x{:<4X},", item);
        if (counter + 1) % column == 0 {
            println!();
        }
        counter += 1;
    }
}

fn main() {
    App::new("myapp")
        .version("1.0")
        .about("Does great things!")
        .author("Kevin K.")
        .get_matches();
    let input = "This is a secret";
    let opt_security = MAX_DEGREE;
    let log = [0_u8; 256];
    let log = generate_exp();
    print_exp(&log);
}

#[test]
fn math_works() {
    let res = mul(0xb6, 0x53);
    assert_eq!(res, 0x36);
    let res = mul(0x1a, 0x53);
    assert_eq!(res, 0x4f);
}
